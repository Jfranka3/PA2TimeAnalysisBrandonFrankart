/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package pa2timeanalysisbrandonfrankart;

/**
 *
 * @author coleo
 */
public final class PA2TimeAnalysisModelBrandonFrankart 
{
    /**
     * Constructs and returns a string to serve as the report header
     * @return full report header
     */
    public static String reportHeader()
    {
        String tempString = "";
        tempString +=
            """
            RECURSIVE VERSUS ITERATIVE ARRAY OPERATIONS
                        Cole Brandon and Jacob Frankart
                        October 15, 2024
            
            """;
        return tempString;
    }//End public String reportHeader()
    
    
    /**
     * Populates an array with longs from 1-6000
     * @param array the array that is being operated on
     * @param arraySize the size of the array
     * @return the populated array
     */
    public static Long[] populateArray(Long[] array, int arraySize)
    {
        array = new Long[arraySize];
        long val = 1;
        for(int i = 0; i < arraySize; i++)
        {
            array[i] = val;
            val++;
        }
        return array;
    }//End public Long[] populateList()
    
    
    /**
     * Uses the Gauss method to sum the contents of an array
     * @param array the array to sum
     */
    public static void gaussMethod(Long[] array)
    {
        long firstNum = array[0];
        String lastNum = String.format("%,d", array[array.length - 1]);
        long gaussSum = array.length*(array.length + 1) / 2;
        System.out.println("the sum of " + firstNum + " to " + lastNum +
                           " is " + String.format("%,d", gaussSum));
    }//End public long gaussMethod()
    
    
    /**
     * Sorts the array of Longs using the bubble sort algorithm
     * CITE THIS!!!!
     * @param array
     * @return array
     */
    public static Long[] bubbleSort(Long[] array)
    {
        int position;
        int index; 
        long temp;
        for (position = array.length - 1; position >= 0; position--)
        { 
            for (index = 0; index <= position - 1; index++)
            {
                if (array[index].compareTo(array[index+1]) > 0)
                {
                    // Swaps values
                    temp = array[index];
                    array[index] = array[index + 1];
                    array[index + 1] = temp;
                }
            }
        }
        return array;
    }//End public Long[] bubbleSort
    
    
    /**
     * Displays the last 10 values in an array
     * @param array the array used
     */
    public static void displayLast(Long[] array)
    {
        int end = array.length - 1;
        int current = array.length - 10;
        while (current <= end)
        {
            System.out.println(array[current]);
            current++;
        }
    }//End public void displayLast
    
    
    /**
     * Iterates through the timeArray array and finds the frequency of each time
     * @param timesArray
     */
    public static void frequencyTableCreate(Long[] timesArray)
    {
        bubbleSort(timesArray);
        long currentTime = timesArray[0];
        int currentFrequency = 0;
        for (int i =0; i < timesArray.length; i++)
        {
            if(timesArray[i].compareTo(currentTime) == 0)
            {
                currentFrequency++;
            }
            else
            {
                System.out.printf("%-4d %17d\n", currentTime, currentFrequency);
                currentTime = timesArray[i];
                currentFrequency = 1;
            }
        }
        System.out.printf("%-4d %17d\n", currentTime, currentFrequency);
    }//End public void frequencyTableCreate
    
    
    
    
    
    /**
     * Returns a string of asterisks to serve as a visual separator
     * @return tempString
     */
    public static String asteriskLine()
    {
        String tempString = "";
        for(int i = 49; i > 0; i--){
            tempString += "*";
        }
        return tempString;
    }//End public String asteriskLine()
    
    
    /**
     * Returns a string of equals signs to serve as a visual separator
     * @return tempString
     */
    public static String equalsLine()
    {
        String tempString = "";
        for(int i = 69; i > 0; i--){
            tempString += "=";
        }
        return tempString;
    }//End public String equalsLine()
    
    
    /**
     * Takes a list and recursively adds each long in the list
     * @param array the array to be operated on
     * @param index the size of the list
     * @return the sum of the list
     */
    public static long recursiveSummation(Long[] array, int index)
    {
        // Base Case
        if(array[index-1] <= 1)
            return array[index-1];
        
        
        return array[index-1] + recursiveSummation(array, index - 1);
    }//End public long recursiveSummation()    
    
    
    /**
     * Populates the timeArray with 10001 times from each individual
     * run of the recursiveSummation method
     * @param array
     * @param timesArray
     * @param size
     * @return times
     */
    public static Long[] recursiveSummationTimes(Long[] array, Long[] timesArray, int size)
    {
        timesArray = new Long[size];
        for(int i = 0; i < timesArray.length; i++)
        {
            long start = System.nanoTime();
            PA2TimeAnalysisModelBrandonFrankart.recursiveSummation(array, array.length);
            long stop = System.nanoTime();
            long elapsed = stop - start;
            timesArray[i] = elapsed/1000;
        }
        return timesArray;
    }//End public Long[] iterativeSummationTrail()
    
    
    /**
     * Takes an array and recursively adds each long in the array
     * @param array
     * @return the sum of the list
     */
    public static long iterativeSummation(Long[] array)
    {
        long sum = 0;
        for(int i = 0; i < array.length; i++)
        {
            sum += array[i];
        }
        return sum;
    }//End public long iterativeSummation()
    
    
    /**
     * Populates the timeArray with 10001 times from each individual
     * run of the iterativeSummation method
     * @param array
     * @param timesArray
     * @return times
     */
    public static Long[] iterativeSummationTimes(Long[] array, Long[] timesArray, int size, long sum, long start, long stop, long elapsed)
    {
        size = 10001;
        sum = 0;
        timesArray = new Long[size];
        for(int i = 0; i < timesArray.length; i++)
        {
            start = System.nanoTime();
            PA2TimeAnalysisModelBrandonFrankart.iterativeSummation(array);
            stop = System.nanoTime();
            elapsed = stop - start;
            timesArray[i] = elapsed/1000;
            sum += elapsed/1000;
        }
        return timesArray;
    }//End public Long[] iterativeSummationTrail()
    
    
    /**
     * Recursive Reversal of a given Array
     * @param array the array to be reversed
     * @param front a pointer tracking the current operational 'front'
     * @param end a pointer tracking the current operational 'end'
     * @return array reversed
     */
    public static Long[] recursiveReversal(Long[] array, int front, int end)
    {
        if (front == end || front > end)
            return array;
        
        long temp = array[front];
        array[front] = array[end];
        array[end] = temp;
        recursiveReversal(array,front+1,end-1);
        return array;
    }// 
    
    /**
     * 
     * @param array
     * @param timesArray
     * @param size
     * @param sum
     * @param start
     * @param stop
     * @param elapsed
     * @return 
     */
    public static Long[] recursiveReversalTimes(Long[] array, Long[] timesArray, int size, long sum, long start, long stop, long elapsed)
    {
        size = 10001;
        sum = 0;
        timesArray = new Long[size];
        for(int i = 0; i < timesArray.length; i++)
        {
            start = System.nanoTime();
            recursiveReversal(array, 0, array.length - 1);
            stop = System.nanoTime();
            elapsed = stop - start;
            timesArray[i] = elapsed/1000;
            sum += elapsed/1000;
        }
        return timesArray;
    }//End public Long[] recursiveSummationTrail()
    
    
    /**
     * Iterative reversal of a list
     * @param array an array to reverse
     * @return the reversed array
     */
    public static Long[] iterativeReversal(Long[] array)
    {
        int front = 0;
        int end = array.length - 1;
        long tempFront;
        while(front < end)
        {
            //Swaps values
            tempFront = array[front];
            array[front] = array[end];
            array[end] = tempFront;
            
            front++;
            end--;
        }
        return array;
    }//End public Long[] iterativeReversal
    
    
    /**
     * Populates the timeArray with 10001 times from each individual
     * run of the iterativeReversal method
     * @param array
     * @param timesArray
     * @param size
     * @param sum
     * @param start
     * @param elapsed
     * @param stop
     * @return timesArray
     */
    public static Long[] iterativeReversalTimes(Long[] array, Long[] timesArray, int size, long sum, long start, long stop, long elapsed)
    {
        size = 10001;
        sum = 0;
        timesArray = new Long[size];
        for(int i = 0; i < timesArray.length; i++)
        {
            start = System.nanoTime();
            iterativeReversal(array);
            stop = System.nanoTime();
            elapsed = stop - start;
            timesArray[i] = elapsed/1000;
            sum += elapsed/1000;
        }
        return timesArray;
    }//End public Long[] iterativeReversalTimes()
}
